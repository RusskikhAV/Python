"""
        Карта сокровищ

На пиратской карте отмечено N точек, в которых зарыты сокровища. Каждая точка задана координатами (Xi, Yi).
Координаты указаны в километрах. Команда Капитана Крюка хочет составить маршрут, чтобы собрать как можно больше кладов.
Однако есть ограничение: для любых двух соседних точек маршрута (Xi, Yi) и (Xj, Yj) координаты Xi и Xj
могут различаться только последней цифрой, как и координаты Yi и Yj тоже могут различаться только последней цифрой.
Например, после точки (15, 10) они могут отправиться в точку (18, 16), а вот из точки (14, 68) в точку (19, 71)
пройти уже не получится, ведь 68 и 71 различаются не только последней цифрой.
Из точки (5, 12) в точку (13, 14) попасть тоже нельзя, так как числа 5 и 13 отличаются в разряде десятков.
По заданным координатам определите, какое максимальное количество точек сможет добавить в свой маршрут Капитан Крюк.

Формат ввода:
    В первой строке указано число N (1 ≤ N ≤ 10^5) — количество точек, отмеченных на карте сокровищ.
    В следующих N строках содержатся пары координат:
    Xi и Yi — координаты i-ой точки. Координаты — целые числа не меньше нуля и не больше 10^9.
    Гарантируется, что совпадающих точек в списке нет.

Формат вывода:
    Выведите одно число — максимальное количество точек, которое Капитан Крюк сможет посетить по маршруту,
    построенному по описанным правилам.
"""

# Считываем количество координат
n = int(input())
# используем словарь, где ключ будет X Y: значение количество ближайших точек
dict_max_len = {}
# храним максимум близлежащих координат
max_coord = 0
# проходимся по всем координатам n-раз
for i in range(n):
    # разделяем координаты по пробелу
    coordinates = input().split(" ")
    # строим ключ X Y, где производим целочисленное деление, так получаем число без последней цифры
    str_key = f"{int(coordinates[0]) // 10} {int(coordinates[1]) // 10}"
    # если в ключ уникальный, добавляем его в словарь со значением 1
    if str_key not in dict_max_len.keys():
        dict_max_len[str_key] = 1
    # иначе увеличиваем значение на 1
    else:
        dict_max_len[str_key] = dict_max_len.get(str_key) + 1
        # проверяем максимум ближайших координат, меняем значение если оно больше предыдущего
        if dict_max_len[str_key] > max_coord:
            max_coord = dict_max_len[str_key]
# выводим максимум ближайших координат
print(max_coord)
